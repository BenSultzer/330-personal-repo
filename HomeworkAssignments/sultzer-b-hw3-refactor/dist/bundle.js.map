{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://sultzer-b-hw3-refactor/./src/utils.ts","webpack://sultzer-b-hw3-refactor/./src/canvas.ts","webpack://sultzer-b-hw3-refactor/./src/enums/audio-defaults.enum.ts","webpack://sultzer-b-hw3-refactor/./src/audio.ts","webpack://sultzer-b-hw3-refactor/./src/classes/Particle.ts","webpack://sultzer-b-hw3-refactor/./src/classes/ParticleSystem.ts","webpack://sultzer-b-hw3-refactor/./src/main.ts","webpack://sultzer-b-hw3-refactor/./src/loader.ts"],"sourcesContent":["// Overview: Homework 3\r\n// Author: Ben Sultzer <bms3902@rit.edu>\r\n\r\n// Returns the given color values formatted as a CSS color\r\n// \"red\" parameter: The R value\r\n// \"green\" parameter: The G value\r\n// \"blue\" parameter: The B value\r\n// \"alpha\" parameter: The A value\r\n// Returns: The CSS color string\r\nconst makeColor = (red:number, green:number, blue:number, alpha:number = 1): string => {\r\n    return `rgba(${red},${green},${blue},${alpha})`;\r\n};\r\n\r\n// Gets a random number between min and max\r\n// \"min\" parameter: The lower bound\r\n// \"max\" parameter: The upper bound\r\n// Returns: The randomly generated number\r\nconst getRandom = (min:number, max:number): number => {\r\n    return Math.random() * (max - min) + min;\r\n};\r\n\r\n// Gets a random midrange color\r\n// Parameters: None\r\n// Returns: The randomly generated color\r\nconst getRandomColor = (): string => {\r\n    const floor:number = 35; // so that colors are not too bright or too dark \r\n    const getByte = (): number => getRandom(floor, 255 - floor); // Generate the random color values\r\n    return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n};\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\n// Attempts to make the given element fullscreen\r\n// \"element\" parameter: The element to make fullscreen\r\n// Returns: Nothing\r\nconst goFullscreen = (element:any): void => {\r\n    // Tests for the various possible contexts for going fullscreen, allowing the element to go fullscreen if the current context can handle it\r\n    if (element.requestFullscreen) {\r\n        element.requestFullscreen();\r\n    } else if (element.mozRequestFullscreen) {\r\n        element.mozRequestFullscreen();\r\n    } else if (element.mozRequestFullScreen) { // camel-cased 'S' was changed to 's' in spec\r\n        element.mozRequestFullScreen();\r\n    } else if (element.webkitRequestFullscreen) {\r\n        element.webkitRequestFullscreen();\r\n    }\r\n    // .. and do nothing if the method is not supported\r\n};\r\n\r\n// Make the color formatting, random color and number, and fullscreen functions public\r\nexport { makeColor, getRandom, getRandomColor, goFullscreen };","// Overview: Homework 3\r\n// Author: Ben Sultzer <bms3902@rit.edu>\r\n\r\n/*\r\n    The purpose of this file is to take in the analyser node and a <canvas> element: \r\n      - the module will create a drawing context that points at the <canvas> \r\n      - it will store the reference to the analyser node\r\n      - in draw(), it will loop through the data in the analyser node\r\n      - and then draw something representative on the canvas\r\n      - maybe a better name for this file/module would be *visualizer.js* ?\r\n*/\r\n\r\n// Import the AppParams interface\r\nimport { AppParams } from './interfaces/appParams.interface';\r\n\r\n// Get the utilty functions\r\nimport * as utils from './utils';\r\n\r\n// Import the ParticleSystem class\r\nimport { ParticleSystem } from \"./classes/ParticleSystem\";\r\n\r\n// Import the Particle class\r\nimport { Particle } from \"./classes/Particle\";\r\n\r\n// Variables for tracking delta time for the particle systems\r\nlet totalTime:number = 0;\r\nlet preTime:number = 0;\r\nlet deltaTime:number = 0;\r\n\r\n// Variable to store the current value for gravity (-1 to start)\r\nlet currentGravity:number = -1;\r\n\r\n// The emitter type for the central particle emitter (fountain to start)\r\nlet emitterType:string = \"fountain\";\r\n\r\n// The shockwave type for the central particles (normal to start)\r\nlet shockwaveType:string = \"normal\";\r\n\r\n// The modifier for central particle speed (1 to start, so no effect)\r\nlet speedModifier:number = 1;\r\n\r\n// Track the lifetimes of the background particle systems\r\nlet backgroundPSLifeCounter:number = 0;\r\n\r\n// Track the lifetimes of the central particles\r\nlet centralParticleLifeCounter:number = 0;\r\n\r\n// The array of particle systems for the background\r\nlet particleSystemsBackground:ParticleSystem[];\r\n\r\n// The array of particles that shoot from the center\r\nlet centralParticles:Particle[];\r\n\r\n// Define variables for drawing the audio data to the canvas\r\nlet ctx:CanvasRenderingContext2D;\r\nlet canvasWidth:number;\r\nlet canvasHeight:number;\r\nlet analyserNode:AnalyserNode;\r\nlet audioData:Uint8Array;\r\n\r\n// A variable to track what kind of analyser data to use for visualization\r\nlet analyserDataType:string = \"frequency\"; // Use frequency as a default\r\n\r\n// Prepares the canvas for audio data\r\n// \"canvasElement\" parameter: The canvas to draw to\r\n// \"analyserNodeRef\" parameter: A reference to the analyser node\r\n// Returns: Nothing\r\nconst setupCanvas = (canvasElement:HTMLCanvasElement, analyserNodeRef:AnalyserNode): void => {\r\n    // create drawing context\r\n    ctx = canvasElement.getContext(\"2d\");\r\n    canvasWidth = canvasElement.width;\r\n    canvasHeight = canvasElement.height;\r\n    // keep a reference to the analyser node\r\n    analyserNode = analyserNodeRef;\r\n    // this is the array where the analyser data will be stored\r\n    audioData = new Uint8Array(analyserNode.fftSize / 2);\r\n    // Create the array of background particle systems and initialize each element with a new particle system\r\n    particleSystemsBackground = new Array(audioData.length);\r\n    for (let i:number = 0; i < particleSystemsBackground.length; i++) {\r\n        particleSystemsBackground[i] = new ParticleSystem(0, 0, 0, 0, \"white\");\r\n    }\r\n    // Create the array of central particles and initialize each element with a new particle\r\n    centralParticles = new Array(audioData.length);\r\n    for (let i:number = 0; i < centralParticles.length; i++) {\r\n        centralParticles[i] = new Particle(canvasWidth / 2, canvasHeight / 2, 0, \"white\", 0, new Array(0, 0));\r\n    }\r\n}\r\n\r\n// Gets the current speed modifier to be used on the central particles\r\n// \"value\" parameter: The speed modifier\r\n// Returns: Nothing\r\nconst getSpeedModFromInput = (value:number): void => {\r\n    speedModifier = value;\r\n}\r\n\r\n// Gets the current shockwave type to be used on the central particles\r\n// \"type\" parameter: The type of shockwave to use\r\n// Returns: Nothing\r\nconst getShockwaveType = (type:string): void => {\r\n    shockwaveType = type;\r\n}\r\n\r\n// Gets the current emitter type to be used when rendering the central particles\r\n// \"type\" parameter: The type of emitter to use\r\n// Returns: Nothing\r\nconst getEmitterType = (type:string): void => {\r\n    emitterType = type;\r\n}\r\n\r\n// Gets the gravity from user input on the gravity slider\r\n// \"value\" parameter: The new gravity\r\n// Returns: Nothing\r\nconst getGravityFromInput = (value:number): void => {\r\n    currentGravity = value;\r\n}\r\n\r\n// Whenever the currently selected analyser data type changes on the page (using the dropdown menu), capture the new data type\r\n// \"dataType\" parameter: The new data type\r\n// Returns: Nothing\r\nconst getAnalyserDataType = (dataType:string): void => {\r\n    analyserDataType = dataType;\r\n}\r\n\r\n// Draws the audio data to the canvas\r\n// \"params\" parameter: The set of app options\r\n// Returns: Nothing\r\nconst draw = (params:AppParams) => {\r\n    // Keep track of the total runtime of the app at 60 FPS, calculating delta time for the particle system\r\n    preTime = totalTime;\r\n    totalTime += 1 / 60;\r\n    deltaTime = totalTime - preTime;\r\n\r\n    // 1 - Populate the audioData array with data from the analyserNode that corresponds to the currently selected analyser data type\r\n    if (analyserDataType == \"frequency\") { // Frequency data\r\n        analyserNode.getByteFrequencyData(audioData);\r\n    } else {\r\n        analyserNode.getByteTimeDomainData(audioData); // Waveform data\r\n    }\r\n\r\n    // 2 - Draw background\r\n    ctx.save();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n    ctx.restore();\r\n\r\n    // Get the play button\r\n    const playButton = document.querySelector(\"#play-button\") as HTMLButtonElement;\r\n\r\n    // 3 - Draw particle systems\r\n    if (params.showParticleSystems) {\r\n        let particleSystemSpacing:number = 4;\r\n        let margin:number = 5;\r\n        let screenWidthForParticleSystems:number = canvasWidth - (audioData.length * particleSystemSpacing) - margin * 2;\r\n        let horizontalSpaceForParticleSystem:number = screenWidthForParticleSystems / audioData.length;\r\n        let topSpacing:number = 100;\r\n\r\n        ctx.save();\r\n        // Loop through the data, creating particle systems for each entry\r\n        for (let i:number = 0; i < audioData.length; i++) {\r\n            // Create a particle system for the current piece of audio data if the lifetime is over for the previous particle system of that entry\r\n            backgroundPSLifeCounter += 1 / 60; // Update the lifetime counter\r\n            if (backgroundPSLifeCounter >= 1.3) {\r\n                // Create a new particle system and reset the lifetime counter\r\n                particleSystemsBackground[i] = new ParticleSystem(margin + i * (horizontalSpaceForParticleSystem + particleSystemSpacing), topSpacing + 256 - audioData[i], 5, ((256 - audioData[i]) + 20) / 10, \"rgba(50, 50, 50, 0.75)\");\r\n                backgroundPSLifeCounter = 0;\r\n            }\r\n        }        \r\n\r\n        // If the current song is playing, update and draw each particle system\r\n        if (playButton.dataset.playing == \"yes\") {\r\n            for (let i:number = 0; i < particleSystemsBackground.length; i++) {\r\n                particleSystemsBackground[i].update(ctx, deltaTime);\r\n            }\r\n        }\r\n        ctx.restore();\r\n    }\r\n\r\n    // 4 - Draw central particles\r\n    if (params.showParticles) {\r\n        ctx.save();\r\n        for (let i:number = 0; i < audioData.length; i++) {\r\n            // Create a particle for the current piece of audio data if the lifetime is over for the previous particle of that entry\r\n            centralParticleLifeCounter += 1 / 60; // Update the lifetime counter\r\n            if (centralParticleLifeCounter >= 3) {\r\n                // Create a new particle and reset the lifetime counter\r\n                // The direction the particle moves should be random if the emitter type is \"fountain\" and oscillate according to a sine wave if the type is \"beam\"\r\n                let direction: number[];\r\n                // Make the speed a little slower for the fountain\r\n                let speed:number;\r\n                if (emitterType == \"fountain\") {\r\n                    direction = new Array(utils.getRandom(-1, 1), utils.getRandom(-1, 1));\r\n                    speed = (100 + audioData[i]) * speedModifier; // Apply the speed modifier from input\r\n                } else {\r\n                    direction = new Array(Math.sin(totalTime * 3), -1); // For the beam, oscillate the direction between up and to the left and up and to the right\r\n                    speed = (200 + audioData[i]) * speedModifier; // Apply the speed modifier from input\r\n                }\r\n                centralParticles[i] = new Particle(canvasWidth / 2, canvasHeight / 2, ((256 - audioData[i]) + 20) / 10, `rgba(${175 + audioData[i]}, 0, 0, 0.75)`, speed, direction);\r\n                centralParticles[i].setGravity(currentGravity);  // Set the current gravity for the particle\r\n                centralParticleLifeCounter = 0;\r\n            }\r\n        }\r\n\r\n        // If the current song is playing, update and draw each particle\r\n        if (playButton.dataset.playing == \"yes\") {\r\n            for (let i:number = 0; i < centralParticles.length; i++) {\r\n                centralParticles[i].setShockwaveType(shockwaveType);\r\n                centralParticles[i].update(deltaTime);\r\n                centralParticles[i].draw(ctx);\r\n            }\r\n        }\r\n        ctx.restore();\r\n    }\r\n\r\n    // 5 - bitmap manipulation\r\n    // TODO: right now. we are looping though every pixel of the canvas (320,000 of them!), \r\n    // regardless of whether or not we are applying a pixel effect\r\n    // At some point, refactor this code so that we are looping though the image data only if\r\n    // it is necessary\r\n\r\n    // A) grab all of the pixels on the canvas and put them in the `data` array\r\n    // `imageData.data` is a `Uint8ClampedArray()` typed array that has 1.28 million elements!\r\n    // the variable `data` below is a reference to that array \r\n    let imageData:ImageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\r\n    let data:Uint8ClampedArray = imageData.data;\r\n    let length:number = data.length;\r\n    let width:number = imageData.width; // not using here\r\n    // B) Iterate through each pixel, stepping 4 elements at a time (which is the RGBA for 1 pixel)\r\n    for (let i:number = 0; i < length; i += 4) {\r\n        // Enter party mode? (Based on Shift RGB bitmap effect)\r\n        if (params.partyMode) {\r\n            // Rapidly shift the RGB values up and down with a sine wave\r\n            data[i] += 100 * Math.sin(totalTime * 10);\r\n            data[i + 1] += 100 * Math.sin(totalTime);\r\n            data[i + 2] += 100 * Math.sin(totalTime);\r\n        }\r\n\r\n        // If the current gravity is up, invert the colors\r\n        if (currentGravity == -1) {\r\n            let red:number = data[i];\r\n            let green:number = data[i + 1];\r\n            let blue:number = data[i + 2];\r\n            data[i] = 255 - red;        // set red\r\n            data[i + 1] = 255 - green;  // set green\r\n            data[i + 2] = 255 - blue;   // set blue\r\n        }\r\n    } // end for\r\n\r\n    // note we are stepping through *each* sub-pixel\r\n    if (params.showEmboss) {\r\n        for (let i:number = 0; i < length; i++) {\r\n            if (i % 4 == 3) {\r\n                continue; // skip alpha channel\r\n            }\r\n            data[i] = 127 + 2 * data[i] - data[i + 4] - data[i + width * 4];\r\n        }\r\n    }\r\n\r\n    // D) copy data back to canvas\r\n    ctx.putImageData(imageData, 0, 0);\r\n} // end draw()\r\n\r\n// make the functions for getting the canvas ready, drawing, and saving the current audio data type to use for drawing public\r\nexport { setupCanvas, draw, getAnalyserDataType, getGravityFromInput, getEmitterType, getShockwaveType, getSpeedModFromInput, centralParticles };","// Use an enum to represent default values for the amount of gain and audio samples to take\r\nenum DEFAULTS {\r\n    gain = .5,\r\n    numSamples = 256\r\n}\r\n\r\nexport { DEFAULTS };","// Overview: Homework 3\r\n// Author: Ben Sultzer <bms3902@rit.edu>\r\n\r\nimport { DEFAULTS } from \"./enums/audio-defaults.enum\";\r\n\r\n// 1 - our WebAudio context, **we will export and make this public at the bottom of the file**\r\nlet audioCtx:AudioContext;\r\n\r\n// **These are \"private\" properties - these will NOT be visible outside of this module (i.e. file)**\r\n// 2 - WebAudio nodes that are part of our WebAudio audio routing graph\r\nlet element:HTMLAudioElement;\r\nlet sourceNode:MediaElementAudioSourceNode;\r\nlet analyserNode:AnalyserNode;\r\nlet gainNode:GainNode;\r\nlet trebleNode:BiquadFilterNode;\r\nlet bassNode:BiquadFilterNode;\r\n\r\n// **Next are \"public\" methods - we are going to export all of these at the bottom of this file**\r\n// Sets the sound file to be used\r\n// \"filePath\" parameter: The file path to the desired sound file\r\n// Returns: Nothing\r\nconst loadSoundFile = (filePath:string): void => {\r\n    element.src = filePath;\r\n}\r\n\r\n// Plays the currently set sound\r\n// Parameters: None\r\n// Returns: Nothing\r\nconst playCurrentSound = (): void => {\r\n    element.play();\r\n}\r\n\r\n// Pauses the currently set sound\r\n// Parameters: None\r\n// Returns: Nothing\r\nconst pauseCurrentSound = (): void => {\r\n    element.pause();\r\n}\r\n\r\n// Changes the volume of the currently set sound\r\n// \"value\" parameter: The new volume\r\n// Returns: Nothing\r\nconst setVolume = (value:number): void => {\r\n    gainNode.gain.value = value;\r\n}\r\n\r\n// Creates and returns a treble node\r\n// \"audioCtx\" parameter: The audio context object to create the treble node\r\n// Returns: The treble node\r\nconst makeTrebleNode = (audioCtx:AudioContext): BiquadFilterNode => {\r\n    // Creates a BiquadFilterNode\r\n    let treble:BiquadFilterNode = audioCtx.createBiquadFilter();\r\n\r\n    // Lets the audio system know this BiquadFilterNode is a treble node\r\n    treble.type = \"highshelf\";\r\n\r\n    // The treble node will look for frequency values greater than 1000 Hz\r\n    treble.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n\r\n    // Any frequencies within the given range will be boosted by the given amount (0 \r\n    // as default becuase treble checkbox is off by default)\r\n    treble.gain.setValueAtTime(0, audioCtx.currentTime);\r\n\r\n    // Return the node\r\n    return treble;\r\n}\r\n\r\n// Creates and returns a bass node\r\n// \"audioCtx\" parameter: The audio context object to create the bass node\r\n// Returns: The bass node\r\nconst makeBassNode = (audioCtx:AudioContext): BiquadFilterNode => {\r\n    // Creates a BiquadFilterNode\r\n    let bass:BiquadFilterNode = audioCtx.createBiquadFilter();\r\n\r\n    // Lets the audio system know this BiquadFilterNode is a treble node\r\n    bass.type = \"lowshelf\";\r\n\r\n    // The bass node will look for frequency values less than 1000 Hz\r\n    bass.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n\r\n    // Any frequencies within the given range will be boosted by the given amount (0 \r\n    // as default becuase bass checkbox is off by default)\r\n    bass.gain.setValueAtTime(0, audioCtx.currentTime);\r\n\r\n    // Return the node\r\n    return bass;\r\n}\r\n\r\n// Boosts the treble frequencies by the given amount\r\n// \"value\" parameter: The amount of boost\r\n// Returns: Nothing \r\nconst boostTreble = (value:number): void => {\r\n    trebleNode.gain.setValueAtTime(value, audioCtx.currentTime);\r\n}\r\n\r\n// Boosts the bass frequencies by the given amount\r\n// \"value\" parameter: The amount of boost\r\n// Returns: Nothing \r\nconst boostBass = (value:number): void => {\r\n    bassNode.gain.setValueAtTime(value, audioCtx.currentTime);\r\n}\r\n\r\n// Sets up the audio graph with the given audio file as the source\r\n// \"filePath\" parameter: The file path to the audio file to use as the source\r\n// Returns: Nothing\r\nconst setUpWebAudio = (filePath:string): void => {\r\n    // 1 - The || is because WebAudio has not been standardized across browsers yet\r\n    const AudioContext = window.AudioContext;\r\n    audioCtx = new AudioContext();\r\n\r\n    // 2 - this creates an <audio> element\r\n    element = new Audio(); // document.querySelector(\"audio\");\r\n\r\n    // 3 - have it point at a sound file\r\n    loadSoundFile(filePath);\r\n\r\n    // 4 - create a source node that points at the <audio> element\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n    // 5 - create an analyser node\r\n    analyserNode = audioCtx.createAnalyser(); // note the UK spelling of \"Analyser\"\r\n\r\n    /*\r\n    // 6\r\n    We will request DEFAULTS.numSamples number of samples or \"bins\" spaced equally \r\n    across the sound spectrum.\r\n    \r\n    If DEFAULTS.numSamples (fftSize) is 256, then the first bin is 0 Hz, the second is 172 Hz, \r\n    the third is 344Hz, and so on. Each bin contains a number between 0-255 representing \r\n    the amplitude of that frequency.\r\n    */\r\n\r\n    // fft stands for Fast Fourier Transform\r\n    analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n    // 7 - create a gain (volume) node\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = DEFAULTS.gain;\r\n\r\n    // 8 - Get the treble node\r\n    trebleNode = makeTrebleNode(audioCtx);\r\n\r\n    // 9 - Get the bass node\r\n    bassNode = makeBassNode(audioCtx);\r\n\r\n    // 10 - connect the nodes - we now have an audio graph\r\n    sourceNode.connect(trebleNode);\r\n    trebleNode.connect(bassNode);\r\n    bassNode.connect(analyserNode);\r\n    analyserNode.connect(gainNode);\r\n    gainNode.connect(audioCtx.destination);\r\n}\r\n\r\n// Make the web audio setup, playing/pausing sound, sound loading, effect toggling, and volume setting functions public, as well as the audio context and analyser node\r\nexport { audioCtx, setUpWebAudio, playCurrentSound, pauseCurrentSound, loadSoundFile, setVolume, boostTreble, boostBass, analyserNode };","// Overview: Homework 3\r\n// Author: Ben Sultzer <bms3902@rit.edu>\r\n// Description: Class that represents a single particle in a particle system\r\nclass Particle {\r\n    positionX:number;\r\n    positionY:number;\r\n    radius:number;\r\n    color:string;\r\n    speed:number;\r\n    direction:number[];\r\n    acceleration:number;\r\n    shockwaveType:string;\r\n\r\n    // Initializes the data necessary for a particle\r\n    // \"positionX\" parameter: The x-coordinate of the particle system's origin\r\n    // \"positionY\" parameter: The y-coordinate of the particle system's origin\r\n    // \"numParticles\" parameter: The number of particles in this particle system\r\n    // Returns: Nothing\r\n    constructor(positionX:number, positionY:number, radius:number, color:string, speed:number, direction:number[]) {\r\n        this.positionX = positionX;\r\n        this.positionY = positionY;\r\n        this.radius = radius;\r\n        this.color = color;\r\n        this.speed = speed;\r\n        this.direction = direction;\r\n        this.normalize(direction); // Make sure to normalize the direction immediately!\r\n        this.acceleration = 1;\r\n        this.shockwaveType = \"normal\";\r\n    }\r\n\r\n    // Normalizes a vector\r\n    // \"direction\" parameter: The direction to normalize\r\n    // Returns: The normalized direction\r\n    normalize(direction:number[]): number[] {\r\n        // Gets the magnitude of the direction\r\n        let magnitude:number = Math.sqrt(Math.pow(direction[0], 2) + Math.pow(direction[1], 2));\r\n\r\n        // Divides each component by the magnitude\r\n        direction[0] /= magnitude;\r\n        direction[1] /= magnitude;\r\n\r\n        // Returns the result\r\n        return direction;\r\n    }\r\n\r\n    // Exerts a shockwave force on this particle that originates from the mouse click position\r\n    // \"mouseX\" parameter: The x-position of the mouse when the user clicks\r\n    // \"mouseY\" parameter: The y-position of the mouse when the user clicks\r\n    // Returns: Nothing\r\n    exertShockwave(mouseX:number, mouseY:number): void {\r\n        // A set amount of force for the shockwave\r\n        let force:number = 1.5;\r\n\r\n        // Get the distance from the mouse click to the particle\r\n        let distance:number = Math.sqrt(Math.pow(this.positionX - mouseX, 2) + Math.pow(this.positionY - mouseY, 2));\r\n\r\n        // Get the direction from the mouse click to the particle\r\n        let shockwaveDirection:number[] = new Array(2);\r\n        shockwaveDirection[0] = this.positionX - mouseX;\r\n        shockwaveDirection[1] = this.positionY - mouseY;\r\n\r\n        // Normalize the shockwave direction\r\n        let shockwaveDirectionNormalized:number[] = this.normalize(shockwaveDirection);\r\n\r\n        // Change the particle's direction by the shockwave's direction and scale it's speed by the force of the shockwave\r\n        this.direction[0] += shockwaveDirectionNormalized[0];\r\n        this.direction[1] += shockwaveDirectionNormalized[1];\r\n\r\n        // If the shockwave type is \"freeze\", scale the force by the distance from the mouse position\r\n        if (this.shockwaveType == \"freeze\") {\r\n            this.speed *= (force * 10) / distance;\r\n        } else {\r\n            this.speed *= force;\r\n        }\r\n    }\r\n\r\n    // Sets the type of shockwave for this particle\r\n    // \"value\": The new shockwave type\r\n    // Returns: Nothing\r\n    setShockwaveType(value:string): void {\r\n        this.shockwaveType = value;\r\n    }\r\n\r\n    // Sets the value of gravity for this particle\r\n    // \"value\": The new gravity value\r\n    // Returns: Nothing\r\n    setGravity(value:number): void {\r\n        this.acceleration = value;\r\n    }\r\n\r\n    // Updates the particle's position with its speed, direction, and acceleration\r\n    // \"deltaTime\" parameter: The time that has passed since last frame\r\n    // Returns: Nothing\r\n    update(deltaTime:number): void {\r\n        // Update vertical direction with acceleration\r\n        this.direction[1] += this.acceleration * deltaTime;\r\n\r\n        // Update position with speed and direction\r\n        this.positionX += this.direction[0] * this.speed * deltaTime;\r\n        this.positionY += this.direction[1] * this.speed * deltaTime;\r\n    }\r\n\r\n    // Draws the particle to the canvas\r\n    // \"ctx\" parameter: The 2D drawing context to use for drawing\r\n    // Returns: Nothing\r\n    draw(ctx:CanvasRenderingContext2D): void {\r\n        // Draw a circle to represent the particle\r\n        this.drawCircle(ctx, this.positionX, this.positionY, this.radius, this.color);\r\n    }\r\n\r\n    // Draws a circle with the specified position, radius, and color\r\n    // \"ctx\" parameter: The 2D drawing context\r\n    // \"x\" parameter: The x-position of the circle\r\n    // \"y\" parameter: The y-position of the circle\r\n    // \"radius\" parameter: The radius of the circle\r\n    // \"color\" parameter: The color of the circle\r\n    // Returns: Nothing\r\n    drawCircle(ctx:CanvasRenderingContext2D, x:number, y:number, radius:number, color:string): void {\r\n        // Save the previous drawing state so that this function is pure \r\n        ctx.save();\r\n\r\n        // Set the various drawing state properties and draw the arc \r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, radius, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n\r\n        // Get the drawing state back to the previous one\r\n        ctx.restore();\r\n    }\r\n}\r\n\r\n// Export the Particle class\r\nexport { Particle };","// Import the Particle class\r\nimport { Particle } from \"./Particle\";\r\n\r\n// Import helper functions\r\nimport * as utils from '../utils';\r\n\r\n// Overview: Homework 3\r\n// Author: Ben Sultzer <bms3902@rit.edu>\r\n// Description: Class that creates an explosion at a point\r\nclass ParticleSystem {\r\n    positionX:number;\r\n    positionY:number;\r\n    particles:Particle[];\r\n    particleRadius:number;\r\n    particleColor:string;\r\n\r\n    // Initializes the data necessary for a particle system\r\n    // \"positionX\" parameter: The x-coordinate of the particle system's origin\r\n    // \"positionY\" parameter: The y-coordinate of the particle system's origin\r\n    // \"numParticles\" parameter: The number of particles in this particle system\r\n    // Returns: Nothing\r\n    constructor(positionX:number, positionY:number, numParticles:number, particleRadius:number, particleColor:string) {\r\n        this.positionX = positionX;\r\n        this.positionY = positionY;\r\n        this.particles = new Array(numParticles);\r\n        this.particleRadius = particleRadius;\r\n        this.particleColor = particleColor;\r\n\r\n        // Initialize the particle system\r\n        this.createParticleSystem();\r\n    }\r\n\r\n    // Creates the particle system with the indicated number of particles\r\n    // Returns: Nothing\r\n    createParticleSystem(): void {\r\n        // Loop through this particle system's list of particles and initialize all particles\r\n        for(let i:number = 0; i < this.particles.length; i++) {\r\n            this.particles[i] = new Particle(this.positionX, \r\n                                             this.positionY, \r\n                                             this.particleRadius, \r\n                                             this.particleColor, \r\n                                             utils.getRandom(100, 200), \r\n                                             new Array(utils.getRandom(-1, 1), utils.getRandom(-1, 1)));\r\n        }\r\n    }\r\n\r\n    // Udpates all particles in this particle system to create an explosion!\r\n    // \"ctx\" parameter: The 2D drawing context to use for drawing\r\n    // \"deltaTime\" parameter: The time that has passed since last frame\r\n    // Returns: Nothing\r\n    update(ctx:CanvasRenderingContext2D, deltaTime:number): void {\r\n        // Loop through all particles, updating their data then drawing them\r\n        for (let i:number = 0; i < this.particles.length; i++) {\r\n            this.particles[i].update(deltaTime);\r\n            this.particles[i].draw(ctx);\r\n        }\r\n    }\r\n}\r\n\r\n// Export the ParticleSystem class\r\nexport { ParticleSystem };","// Overview: Homework 3\r\n// Author: Ben Sultzer <bms3902@rit.edu>\r\n\r\n/*\r\n    main.ts is primarily responsible for hooking up the UI to the rest of the application \r\n    and setting up the main event loop\r\n*/\r\n\r\n// We will write the functions in this file in the traditional ES5 way\r\n// In this instance, we feel the code is more readable if written this way\r\n// If you want to re-write these as ES6 arrow functions, to be consistent with the other files, go ahead!\r\n\r\n// Import the drawing capabilities\r\nimport * as canvas from './canvas';\r\n\r\n// Import the audio context, analyser node, and audio interface functions\r\nimport * as audio from './audio';\r\n\r\n// Import helper functions\r\nimport * as utils from './utils';\r\n\r\n// Import the AppParams interface\r\nimport { AppParams } from './interfaces/appParams.interface';\r\n\r\n// Variables to store the app title, audio file paths, track names, and app description\r\nlet title: string;\r\nlet audioFilePaths: string[];\r\nlet trackNames: string[];\r\nlet appDescription: string;\r\n\r\n// Create an object of the AppParams type to represent the options for this app\r\nconst appParams: AppParams = { showParticleSystems: true, showParticles: true, partyMode: false, showEmboss: false };\r\n\r\n// The default song to play\r\nlet defaultTrack: string = \"media/New Adventure Theme.mp3\";\r\n\r\n// Create variables for all elements to get from the DOM\r\nlet particleSysCB = document.querySelector(\"#particle-systems-cb\") as HTMLInputElement;\r\nlet particlesCB = document.querySelector(\"#particles-cb\") as HTMLInputElement;\r\nlet partyCB = document.querySelector(\"#party-cb\") as HTMLInputElement;\r\nlet embossCB = document.querySelector(\"#emboss-cb\") as HTMLInputElement;\r\n\r\n// Function for detecting where the canvas was clicked and generating a shockwave that radiates from that point, pushing the central particles out of the way\r\n// \"e\" parameter: The event object sent back by the click event listener\r\n// Returns: Nothing\r\nconst canvasClicked = (e: PointerEvent): void => {\r\n    // Gets information about the clicked area to convert into canvas space\r\n    let rectTarget = e.target as HTMLCanvasElement;         // Gets the element that was clicked as a canvas element\r\n    let rect: DOMRect = rectTarget.getBoundingClientRect();  // Gets position and size information of the canvas element relative to the viewport\r\n\r\n    // Calculates where the canvas was clicked relative to its own top-left corner rather than the viewport\r\n    let mouseX: number = e.clientX - rect.x;\r\n    let mouseY: number = e.clientY - rect.y;\r\n\r\n    // Indicates the canvas was clicked, sending the coordinates and triggering the shockwave for each central particle\r\n    for (let i: number = 0; i < canvas.centralParticles.length; i++) {\r\n        canvas.centralParticles[i].exertShockwave(mouseX, mouseY);\r\n    }\r\n}\r\n\r\n// Loads app data from a JSON file (app title, audio file paths/track titles for the song select element, and an app description)\r\n// Parameters: None\r\n// Returns: Nothing\r\nconst loadJson = (): void => {\r\n    // Get the path to the JSON file and create an XHR object\r\n    const url: string = \"data/av-data.json\";\r\n    const xhr: XMLHttpRequest = new XMLHttpRequest();\r\n\r\n    // Set up the onload event handler with an anonymous function that gets the data and places each data piece in its proper place in the page (takes the event handler's Event object as a parameter and returns nothing)\r\n    xhr.onload = (e: ProgressEvent<EventTarget>): void => {\r\n        // Get the XHR object that triggered the onload event\r\n        let xhrTarget = e.target as XMLHttpRequest;\r\n\r\n        // Variable to store the resulting JSON data\r\n        let json: Object;\r\n\r\n        // Attempt to read in the JSON. Display an error in the app description paragraph tag if there was a problem\r\n        try {\r\n            json = JSON.parse(xhrTarget.responseText);\r\n        } catch {\r\n            document.querySelector(\"#app-description\").innerHTML = \"An error occurred loading app set-up data.\";\r\n            return;\r\n        }\r\n\r\n        // Get all the keys from the JSON object\r\n        const keys: string[] = Object.keys(json);\r\n\r\n        // Assign each of the key values to the correct variable for the page\r\n        title = json[keys[0]];\r\n        audioFilePaths = json[keys[1]];\r\n        trackNames = json[keys[2]];\r\n        appDescription = json[keys[3]];\r\n\r\n        // Set the title of the app\r\n        document.querySelector(\"title\").innerHTML = title;\r\n\r\n        // Build the select element for songs\r\n        for (let i: number = 0; i < audioFilePaths.length; i++) {\r\n            if (trackNames[i] == \"New Adventure Theme\") {   // Make sure the \"New Adventure Theme\" track is selected by default\r\n                document.querySelector(\"#track-select\").innerHTML += `<option value=\"media/${audioFilePaths[i]}\" selected>${trackNames[i]}</option>`;\r\n            } else {\r\n                document.querySelector(\"#track-select\").innerHTML += `<option value=\"media/${audioFilePaths[i]}\">${trackNames[i]}</option>`;\r\n            }\r\n        }\r\n\r\n        // Set the app description paragraph\r\n        document.querySelector(\"#app-description\").innerHTML = appDescription;\r\n    };\r\n    // Set up the error event handler with an anonymous function that simply logs to the console the HTTP Status Code of the XHR object (takes the event handler's Event object as a parameter and returns nothing)\r\n    xhr.onerror = (e: ProgressEvent<EventTarget>): void => {\r\n        // Get the XHR object that triggered the onload event\r\n        let xhrTarget = e.target as XMLHttpRequest;\r\n\r\n        // Print that there was an error\r\n        console.log(`In onerror - HTTP Status Code = ${xhrTarget.status}`);\r\n    };\r\n\r\n    // Open a connection to the JSON file and send the request\r\n    xhr.open(\"GET\", url);\r\n    xhr.send();\r\n}\r\n\r\n// Sets up the audio visualizer\r\n// Parameters: None\r\n// Returns: Nothing\r\nconst init = (): void => {\r\n    // Starts creation of the audio graph with defaultTrack as the source\r\n    audio.setUpWebAudio(defaultTrack);\r\n    console.log(\"init called\");\r\n    let canvasElement: HTMLCanvasElement = document.querySelector(\"canvas\"); // hookup <canvas> element\r\n\r\n    // Initialize the various UI elements of the audio visualizer\r\n    setupUI(canvasElement);\r\n\r\n    // Get the canvas ready for drawing\r\n    canvas.setupCanvas(canvasElement, audio.analyserNode);\r\n\r\n    // Gets the screen position of a click relative to the top-left corner of the canvas for exerting a shockwave on the central particles\r\n    canvasElement.addEventListener(\"click\", canvasClicked);\r\n\r\n    // Get initial app data from av-data.json\r\n    loadJson();\r\n\r\n    // Create variables for all elements to get from the DOM\r\n    let analyserDataTypeDropdown = document.querySelector(\"#analyser-data-type\") as HTMLSelectElement;\r\n    let emitterTypeDropdown = document.querySelector(\"#emitter-type\") as HTMLSelectElement;\r\n    let shockwaveTypeDropdown = document.querySelector(\"#shockwave-type\") as HTMLSelectElement;\r\n\r\n    // Set the checkboxes to be checked on load\r\n    particleSysCB.checked = true;\r\n    particlesCB.checked = true;\r\n    partyCB.checked = false;\r\n    embossCB.checked = false;\r\n\r\n    // The default value of the analyser data type should be \"frequency\"\r\n    analyserDataTypeDropdown.value = \"frequency\";\r\n\r\n    // Set up the event handler for getting the current analyser data type to use for visualization\r\n    analyserDataTypeDropdown.onchange = (): void => { canvas.getAnalyserDataType(analyserDataTypeDropdown.value) };\r\n\r\n    // The default value of the emitter type should be \"fountain\"\r\n    emitterTypeDropdown.value = \"fountain\";\r\n\r\n    // Set up the event handler for getting the current emitter type to use for the central particle emitter\r\n    emitterTypeDropdown.onchange = (): void => { canvas.getEmitterType(emitterTypeDropdown.value) };\r\n\r\n    // The default value of the shockwave type should be \"normal\"\r\n    shockwaveTypeDropdown.value = \"normal\";\r\n\r\n    // Set up the event handler for getting the current shockwave type to use for the central particles\r\n    shockwaveTypeDropdown.onchange = (): void => { canvas.getShockwaveType(shockwaveTypeDropdown.value) };\r\n\r\n    // Call the loop function for a constant stream of audio data from the analyser node\r\n    loop();\r\n}\r\n\r\n// Hooks up the various UI elements of the audio visualizer\r\n// \"canvasElement\" parameter: A reference to the canvas containing the audio visualizer\r\n// Returns: Nothing\r\nconst setupUI = (canvasElement: HTMLCanvasElement): void => {\r\n    // Set up hamburger menu\r\n    const burgerIcon = document.querySelector(\"#burger\") as HTMLAnchorElement;\r\n    const navbarMenu = document.querySelector(\"#nav-links\") as HTMLDivElement;\r\n\r\n    burgerIcon.addEventListener(\"click\", (): void => {\r\n        navbarMenu.classList.toggle(\"is-active\");\r\n    });\r\n\r\n    // A - hookup fullscreen button\r\n    const fsButton = document.querySelector(\"#fs-button\") as HTMLButtonElement;\r\n\r\n    // add .onclick event to button\r\n    fsButton.onclick = (e: MouseEvent): void => {\r\n        console.log(\"goFullscreen() called\");\r\n        utils.goFullscreen(canvasElement);\r\n    };\r\n\r\n    // B - hookup play button\r\n    const playButton = document.querySelector(\"#play-button\") as HTMLButtonElement;\r\n\r\n    // add .onclick event to button\r\n    playButton.onclick = (e: MouseEvent): void => {\r\n        console.log(`audioCtx.state before = ${audio.audioCtx.state}`);\r\n\r\n        // check if context is in suspended state (autoplay policy)\r\n        if (audio.audioCtx.state == \"suspended\") {\r\n            audio.audioCtx.resume();\r\n        }\r\n        console.log(`audioCtx.state after = ${audio.audioCtx.state}`);\r\n\r\n        // Toggle playing/pausing\r\n        if (playButton.dataset.playing == \"no\") {\r\n            // if track is currently paused, play it\r\n            audio.playCurrentSound();\r\n            playButton.dataset.playing = \"yes\"; // our CSS will set the text to \"Pause\"\r\n        } else {\r\n            // if track IS playing, pause it\r\n            audio.pauseCurrentSound();\r\n            playButton.dataset.playing = \"no\"; // our CSS will set the text to \"Play\"\r\n        }\r\n    };\r\n\r\n    // C - hookup volume slider & label\r\n    let volumeSlider = document.querySelector(\"#volume-slider\") as HTMLInputElement;\r\n    let volumeLabel = document.querySelector(\"#volume-label\") as HTMLLabelElement;\r\n\r\n    // add .oninput event to slider\r\n    volumeSlider.oninput = (e: InputEvent): void => {\r\n        // set the gain\r\n        audio.setVolume(Number(volumeSlider.value));\r\n        // update value of label to match value of slider\r\n        let newValue: number = Math.round((Number(volumeSlider.value) / 2 * 100));\r\n        volumeLabel.innerHTML = newValue.toString();\r\n    };\r\n\r\n    // set value of label to match initial value of slider\r\n    volumeSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n    // D - hookup gravity slider & label\r\n    let gravitySlider = document.querySelector(\"#gravity-slider\") as HTMLInputElement;\r\n    let gravityLabel = document.querySelector(\"#gravity-label\") as HTMLLabelElement;\r\n\r\n    // Add .oninput event to slider\r\n    gravitySlider.oninput = (e: InputEvent): void => {\r\n        // Set the gravity value\r\n        canvas.getGravityFromInput(Number(gravitySlider.value));\r\n        // Update value of label to match value of slider\r\n        gravityLabel.innerHTML = gravitySlider.value;\r\n    };\r\n\r\n    // Set value of label to match initial value of slider by firing an input event on start-up\r\n    // First set the value to 1\r\n    gravitySlider.value = \"1\";\r\n    gravitySlider.dispatchEvent(new Event(\"input\"));\r\n\r\n    // E - hookup speed slider & label\r\n    let speedSlider = document.querySelector(\"#speed-slider\") as HTMLInputElement;\r\n    let speedLabel = document.querySelector(\"#speed-label\") as HTMLLabelElement;\r\n\r\n    // Add .oninput event to slider\r\n    speedSlider.oninput = (e: InputEvent): void => {\r\n        // Set the speed modifier\r\n        canvas.getSpeedModFromInput(Number(speedSlider.value));\r\n        // Update value of label to match value of slider\r\n        speedLabel.innerHTML = speedSlider.value;\r\n    };\r\n\r\n    // Set value of label to match initial value of slider by firing an input event on start-up\r\n    // First set the value to 1\r\n    speedSlider.value = \"1\";\r\n    speedSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n    // F - hookup treble slider & label\r\n    let trebleSlider = document.querySelector(\"#treble-slider\") as HTMLInputElement;\r\n    let trebleLabel = document.querySelector(\"#treble-label\") as HTMLLabelElement;\r\n\r\n    // Add .oninput event to slider\r\n    trebleSlider.oninput = (e: InputEvent): void => {\r\n        // Set the treble boost amount\r\n        audio.boostTreble(Number(trebleSlider.value));\r\n        // Update value of label to match value of slider\r\n        trebleLabel.innerHTML = trebleSlider.value;\r\n    };\r\n\r\n    // Set value of label to match initial value of slider by firing an input event on start-up\r\n    // First set the value to 0\r\n    trebleSlider.value = \"0\";\r\n    trebleSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n    // G - hookup bass slider & label\r\n    let bassSlider = document.querySelector(\"#bass-slider\") as HTMLInputElement;\r\n    let bassLabel = document.querySelector(\"#bass-label\") as HTMLLabelElement;\r\n\r\n    // Add .oninput event to slider\r\n    bassSlider.oninput = (e: InputEvent): void => {\r\n        // Set the bass boost amount\r\n        audio.boostBass(Number(bassSlider.value));\r\n        // Update value of label to match value of slider\r\n        bassLabel.innerHTML = bassSlider.value;\r\n    };\r\n\r\n    // Set value of label to match initial value of slider by firing an input event on start-up\r\n    // First set the value to 0\r\n    bassSlider.value = \"0\";\r\n    bassSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n    // H - hookup track <select>\r\n    let trackSelect = document.querySelector(\"#track-select\") as HTMLSelectElement;\r\n\r\n    // add .onchange event to <select>\r\n    trackSelect.onchange = (): void => {\r\n        // Load next sound file\r\n        audio.loadSoundFile(trackSelect.value);\r\n        // pause the current track if it is playing\r\n        if (playButton.dataset.playing == \"yes\") {\r\n            playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n        }\r\n    };\r\n\r\n    // I - hookup checkboxes\r\n    particleSysCB.addEventListener(\"click\", (e: MouseEvent): void => { appParams.showParticleSystems = particleSysCB.checked; });\r\n    particlesCB.addEventListener(\"click\", (e: MouseEvent): void => { appParams.showParticles = particlesCB.checked; });\r\n    partyCB.addEventListener(\"click\", (e: MouseEvent): void => { appParams.partyMode = partyCB.checked; });\r\n    embossCB.addEventListener(\"click\", (e: MouseEvent): void => { appParams.showEmboss = embossCB.checked; });\r\n} // end setupUI\r\n\r\n// Displays data from the analyser node every frame\r\n// Parameters: None\r\n// Returns: Nothing\r\nconst loop = (): void => {\r\n    // Start the animation loop with this function at 60 FPS\r\n    setTimeout(loop, 1000 / 60);\r\n\r\n    // Visualize the audio data!\r\n    canvas.draw(appParams);\r\n}\r\n\r\n// Make the init function public\r\nexport { init };","// Overview: Homework 3\r\n// Author: Ben Sultzer <bms3902@rit.edu>\r\n\r\n// Get main.ts's init() function\r\nimport { init } from \"./main\";\r\n\r\n// Starts up the app\r\n// Parameters: None\r\n// Returns: Nothing\r\nconst startUp = (): void => {\r\n    console.log(\"startUp() called\");\r\n    // 1 - do preload here - load fonts, images, additional sounds, etc...\r\n\r\n    // 2 - start up app\r\n    init();\r\n}\r\n\r\n// Start up the app\r\nstartUp();"],"names":["particleSystemsBackground","centralParticles","ctx","canvasWidth","canvasHeight","analyserNode","audioData","DEFAULTS","audioCtx","sourceNode","gainNode","trebleNode","bassNode","getRandom","min","max","Math","random","positionX","positionY","radius","color","speed","direction","this","normalize","acceleration","shockwaveType","magnitude","sqrt","pow","exertShockwave","mouseX","mouseY","distance","shockwaveDirection","Array","shockwaveDirectionNormalized","setShockwaveType","value","setGravity","update","deltaTime","draw","drawCircle","x","y","save","fillStyle","beginPath","arc","PI","closePath","fill","restore","numParticles","particleRadius","particleColor","particles","createParticleSystem","i","length","Particle","totalTime","preTime","currentGravity","emitterType","speedModifier","backgroundPSLifeCounter","centralParticleLifeCounter","analyserDataType","title","audioFilePaths","trackNames","appDescription","loadSoundFile","filePath","src","appParams","showParticleSystems","showParticles","partyMode","showEmboss","particleSysCB","document","querySelector","particlesCB","partyCB","embossCB","canvasClicked","e","rect","target","getBoundingClientRect","clientX","clientY","setupUI","canvasElement","burgerIcon","navbarMenu","addEventListener","classList","toggle","onclick","element","console","log","requestFullscreen","mozRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","playButton","state","resume","dataset","playing","play","pause","volumeSlider","volumeLabel","oninput","Number","gain","newValue","round","innerHTML","toString","dispatchEvent","Event","gravitySlider","gravityLabel","speedSlider","speedLabel","trebleSlider","trebleLabel","setValueAtTime","currentTime","bassSlider","bassLabel","trackSelect","onchange","MouseEvent","checked","loop","setTimeout","params","getByteFrequencyData","getByteTimeDomainData","fillRect","horizontalSpaceForParticleSystem","margin","ParticleSystem","topSpacing","sin","imageData","getImageData","data","width","red","green","blue","putImageData","AudioContext","window","Audio","createMediaElementSource","createAnalyser","fftSize","numSamples","createGain","treble","createBiquadFilter","type","frequency","makeTrebleNode","bass","makeBassNode","connect","destination","xhr","analyserNodeRef","getContext","height","Uint8Array","XMLHttpRequest","onload","json","xhrTarget","JSON","parse","responseText","keys","Object","onerror","status","open","send","analyserDataTypeDropdown","emitterTypeDropdown","shockwaveTypeDropdown","dataType","init"],"sourceRoot":""}